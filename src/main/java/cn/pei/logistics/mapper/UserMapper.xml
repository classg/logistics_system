<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.pei.logistics.mapper.UserMapper">
  <!-- 配置二级缓存提供商RedisCache -->
  <cache type="org.mybatis.caches.redis.RedisCache" />
  <resultMap id="BaseResultMap" type="cn.pei.logistics.pojo.User">
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="permission_ids" jdbcType="VARCHAR" property="permissionIds" />
    <result column="realname" jdbcType="VARCHAR" property="realname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_date" jdbcType="DATE" property="createDate" />
    <result column="role_id" jdbcType="BIGINT" property="roleId" />
  </resultMap>

  <!-- 根据usernmae返回一个user对象 -->
  <select id="selectByUsername" resultMap="BaseResultMap">
    <!--select t_user.* ,realname,permissionIds
        FROM t_user LEFT JOIN t_role on t_role.role_id = t_user.role_id where username = #{username}-->
    select t_user.*,rolename,permission_ids
    from t_user left join t_role on t_user.role_id = t_role.role_id where username = #{username}
  </select>


  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Base_Column_List">
    user_id, username, realname, password, salt, status, create_date, role_id
  </sql>

  <select id="selectByExample" parameterType="cn.pei.logistics.pojo.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>

    <!--user_id, username, realname, password, salt, status, create_date, role_id

   from t_user
   -->

    t_user.*,t_role.rolename
    from t_user left join t_role on t_user.role_id = t_role.role_id


    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>

    order by t_user.user_id asc

  </select>


  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>


  <insert id="insert" parameterType="cn.pei.logistics.pojo.User">
    insert into t_user (user_id, username, realname, 
      password, salt, status, 
      create_date, role_id)
    values (#{userId,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{createDate,jdbcType=DATE}, #{roleId,jdbcType=BIGINT})
  </insert>



  <update id="updateByPrimaryKeySelective" parameterType="cn.pei.logistics.pojo.User">
    update t_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="realname != null">
        realname = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=DATE},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>

</mapper>